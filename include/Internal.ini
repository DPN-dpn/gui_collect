namespace = gui_collect\internal

; DO NOT MANUALLY INCLUDE THIS FILE!!!
; ------------------------------------
; ------------------------------------
; ------------------------------------
; ------------------------------------

; Prints text on screen using provided params
[CommandListPrintText]
run = CommandListRenderText

; Constants -------------------------
[Constants]
; Used for text output if autodetection fails
global $window_width = 1920
global $window_height = 1080

[CommandListRenderText]
; Backup used IniParams
local $bak_x = x
local $bak_y = y
; Pass window size in a fail-safe way
run = CommandListPassWindowInfo
; Calculate positions of all chars
run = CustomShaderFormatText
; Renter formatted text
run = CustomShaderRenderText
; Restore IniParams:
x = $bak_x
y = $bak_y

[CommandListPassWindowInfo]
; Pass a game window size to the shader
if window_width >= 640
    x0 = window_width
    y0 = window_height
; Fall back to backup methods if user gets zeroes due to 3dmigoto bug
else if rt_width >= 640
    x0 = rt_width
    y0 = rt_height
else if res_width >= 640
    x0 = res_width
    y0 = res_height
else
    x0 = $window_width
    y0 = $window_height
endif

[CustomShaderFormatText]
; The compute shader scans the text and breaks it up into smaller chunks for
; each geometry shader invocation to render (max 64 characters each),
; calculating the position on the screen where each chunk of text is positioned
; wrapping long lines as needed. This is only run when necessary, not every
; frame.
cs = TextPrinter.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Pass resources to the shader
cs-t100 = ResourceFont
if ResourceText !== null
	cs-t113 = ResourceText
	cs-t114 = ResourceTextParams
    cs-t115 = ResourceTextPosParams
	clear = ResourceTextPosition
	cs-u0 = ResourceTextPosition
    ; Run the compute shader
	dispatch = 1, 1, 1
endif
; Unbind resources
cs-u0 = null
cs-t100 = null
cs-t113 = null
cs-t114 = null
cs-t115 = null

[CustomShaderRenderText]
; The vertex shader passes draw indexes to the geometry shader:
vs = TextPrinter.hlsl
; The geometry shader generates the text for a given draw index:
gs = TextPrinter.hlsl
; The pixel shader draws the font:
ps = TextPrinter.hlsl
hs = null
ds = null
cs = null
; Allows us to use SV_Position.z to pack a texcoord, increasing the character
; limit per geometry shader invocation:
depth_clip_enable = false
; Disable front/back face culling so the vertices can be in any rotation
cull = none
; Enable alpha blending. To change the text colour, edit the pixel shader:
blend = add one inv_src_alpha
; Use points as the primitive from the vertex shader to the geometry shader:
topology = point_list
; run = CommandListUnbindAllRenderTargets
o0 = set_viewport no_view_cache bb
; Font is passed into the pixel shader (to draw it) *and* the geometry shader
; (as the character sizes are encoded in the final character of the font):
gs-t100 = ResourceFont
ps-t100 = ResourceFont
post gs-t100 = null
post ps-t100 = null
; Pass resources to the shader
gs-t112 = ResourceTextPosition
gs-t113 = ResourceText
gs-t114 = ResourceTextParams
gs-t115 = ResourceTextPosParams
ps-t114 = ResourceTextParams
; Draw vertices
; Change this number to limit how much text may be drawn:
draw = 4096, 0
; Unbind resources
gs-t112 = null
gs-t113 = null
gs-t114 = null
gs-t115 = null
ps-t114 = null
ResourceText = null
ResourceTextParams = null
ResourceTextPosParams = null

; Text Printing Resources -------------------------

; These resources hold the currently displayed help text and parameters. When
; ResourceText is null the shader will not be run:
[ResourceText]
[ResourceTextParams]
[ResourceTextPosParams]


[ResourceFont]
; Note that this font has the size of each character embedded in the unused
; space of the final character, which the geometry shader uses to render each
; character the correct width. This font was generated with gen_bm_font.py,
; then converted to DDS (because our PNG loading seems to be broken o_O):
filename = LiberationSans-Bold.dds


[ResourceTextPosition]
; A buffer passed from the formatting compute shader to the geometry shader,
; indicating which shader invocation draws which text at what position.
type = StructuredBuffer
stride = 16
array = 4096
